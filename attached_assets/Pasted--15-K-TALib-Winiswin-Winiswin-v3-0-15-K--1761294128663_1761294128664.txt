這是一份以 15分鐘K線為核心主軸，並整合您對 TALib效率 與 自我迭代模型 的核心需求，為 Winiswin 系統量身打造的全面性升級方針報告。

Winiswin v3.0：15分鐘K線核心架構 - 全面效能、性能與智能進化升級方針
報告日期： 2025年10月24日
基於版本： Winiswin v2.0 (GitHub: https://github.com/M116cj/winiswin/tree/main )
核心轉向： 從「1小時趨勢」驅動，升級為「15分鐘K線為主，1小時為輔」的雙層策略架構。
目標： 在保持輕量化優勢的同時，實現毫秒級反應速度、極致穩定性、並具備自我學習能力的下一代交易引擎。

1. 執行摘要：為何15分鐘是關鍵
15分鐘K線是加密貨幣期貨交易的「黃金時間框架」，它完美平衡了：

反應速度： 比1小時快4倍，能捕捉更短的價格波動與流動性變化。
信號質量： 比1分鐘更少噪音，信號更具統計意義。
策略深度： 為ICT/SMC的訂單塊、流動性區域等概念提供了足夠的「空間」來形成和驗證。
v3.0的核心哲學：

「以15分鐘為主戰場，用1小時定方向，以TALib為引擎，用XGBoost為大腦。」 

2. 核心架構升級：雙層K線分析引擎
主戰場 (Primary)
15分鐘 (15m)
核心信號生成、倉位計算、交易執行
使用
ta-lib-binary
進行
極速
技術指標計算。所有ICT/SMC邏輯（訂單塊、流動性、市場結構）
完全基於15m數據
。
反應速度提升400%
。交易決策基於更即時的市場動能，大幅提高交易頻率與勝率潛力。
方向導航 (Secondary)
1小時 (1h)
趨勢篩選、風險調節、策略優化
保留1h趨勢判斷，但
僅作為一個篩選條件
。例如：只有在1h趨勢為「看跌」時，才執行15m的做空信號。
提升信號純度
，避免在大趨勢逆風時進行高頻交易，降低虧損風險。

架構圖：



1
2
3
4
5
[15m K線數據] ────> [TALib指標計算] ────> [ICT/SMC 信號生成] ────> [風險管理] ────> [執行訂單]
     ↑                                                                 ↑
     └── [1h K線數據] ───> [趨勢判斷] ────────────────────────────────┘
                                                                 ↑
                                                         [XGBoost 自我學習模型]
3. 效能與性能優化：TALib + Numba + 並行化 (極致速度)
目標： 將15m數據分析週期從現有的40秒，壓縮至 < 10秒。

1. 引入 TALib-binary
在
requirements.txt
中，將所有
pandas
+
numpy
實現的指標（MACD, RSI, EMA, ATR, Bollinger Bands）
全部替換為 ta-lib-binary
。
指標計算速度提升 5-10倍
。這是整個系統速度的
關鍵瓶頸
。
2. Numba JIT 加速
對
ict_smc.py
中的複雜邏輯（如訂單塊識別、流動性區間計算）使用
@numba.jit(nopython=True)
裝飾。
將這些Python迴圈的計算速度提升至接近C語言，
再加速 2-3倍
。
3. 優化並行化策略
將
strategy_engine.py
中的
asyncio.gather()
並行分析，
從「369個符號」改為「分組並行」
。例如，將符號按字母分為6組，每組在一個獨立的
ThreadPoolExecutor
中執行，避免單一事件循環過載。
避免因單一符號計算卡頓導致整個週期延遲
，確保
穩定的10秒週期
。
4. 精簡數據獲取
修改
binance_client.py
，只獲取
15m
和
1h
的K線數據，並
只獲取最近的50根K線
（足夠計算所有指標）。
減少90%的API數據傳輸量
，大幅降低網路延遲和Binance API負載。

結果預期： 整個15m分析週期（從獲取數據到生成信號）穩定在 8-10秒內完成，為交易執行留出充足時間。

4. 系統穩定性強化：防崩潰設計
Discord心跳阻塞
完全重構通知機制
：
1.
禁用實時通知
：移除
discord_bot.py
中的每條信號通知。
2.
啟用「週期摘要」
：每30分鐘，將「Top 3信號」、「總交易數」、「盈虧統計」打包成
一則精美Markdown訊息
發送。
3.
異步任務隊列
：使用
asyncio.Queue
管理所有通知任務，確保即使發送失敗，也不會阻塞主交易循環。
徹底解決心跳阻塞問題
，確保Discord通知
永不中斷
，且不影響交易。
無效符號與數據不足
建立「動態白名單」
：
1. 在
binance_client.py
中，獲取
all_symbols
後，
立即過濾
：只保留
USDT
/
BUSD
交易對，且符號名稱**必須符合正則 `^[A-Z]{2,10}[USDT
BUSD]$
**。<br>2. **設定最低K線要求**：對15m數據，要求至少 **30根K線**（比1h的50根更靈活）。數據不足則直接跳過，不報錯。<br>3. **記錄並忽略**：將所有被過濾的無效符號（如
1000XECUSDT
,
币安人生USDT
）寫入
blacklist.json`，下次啟動時自動排除。
系統重啟與斷線
引入「斷點續傳」
：
1. 在
trade_logger.py
中，將每筆交易的「訂單ID」、「狀態」、「時間戳」記錄到 SQLite 資料庫。
2. 系統啟動時，檢查資料庫中是否有「未完成」的訂單（如已下單但未平倉），並嘗試從Binance API獲取最新狀態，恢復追蹤。
極大提升系統魯棒性
，即使因網路中斷或伺服器重啟，也能恢復交易狀態，避免資產失控。

5. 智能進化：XGBoost 自我學習模型 (V3.0的靈魂)
核心理念： 我們不需要一個「會寫代碼」的AI，我們需要一個「會調整參數的智囊團」。

「策略權重調節器」
- 15m信號的「信心度」
- 15m信號的「預期ROI」
- 15m信號的「ATR波動性」
- 1h趨勢是否與15m信號一致
- 該符號過去10筆交易的平均盈虧
- 該符號過去10筆交易的「是否觸及止損」
-
訂單塊權重
(Order Block Weight)
-
流動性區間權重
(Liquidity Pool Weight)
-
最低信心度閾值
(Min Confidence Threshold)
每24小時運行一次
，在交易週期結束後，
離線
運行。
-
權重限制
：任何權重調整不得超過±0.2（例如，從0.7調整為0.9）。
-
熔斷機制
：若過去24小時回撤 > 5%，則
凍結所有調整
，並發送警報。
「槓桿微調器」
- 信號信心度
- 15m ATR波動性
- 15m成交量變化率
- 該符號過去5筆交易的「最大浮動虧損」
-
最終槓桿倍數
(Final Leverage)
每15分鐘運行一次
，在每次交易前，
離線
運行。
-
最大槓桿上限
：
MAX_LEVERAGE=10x
（嚴格限制）。
-
低波動性時降槓桿
：當ATR < 0.5%時，槓桿上限為
DEFAULT_LEVERAGE=2x
。

執行流程：

trade_logger.py 將每筆交易的詳細數據（盈虧、槓桿、信心度、ATR等）寫入 trading_history.db。
optimizer/strategy_optimizer.py 每24小時讀取數據，訓練XGBoost模型。
模型輸出 config/adaptive_weights.json 文件。
main.py 在每次啟動和每次交易前，讀取此文件，動態覆蓋 config.py 中的默認參數。
示例：

系統發現「流動性區間」策略在過去一週虧損頻繁，而「訂單塊」策略勝率高。XGBoost模型將輸出：

json


1
2
3
4
5
⌄
{
  "order_block_weight": 0.85,
  "liquidity_pool_weight": 0.15,
  "min_confidence_threshold": 0.75
}
系統自動將「訂單塊」的權重從0.7提升至0.85，將「流動性區間」的權重從0.3降低至0.15。策略邏輯未變，但其「重要性」被動態調整。 

6. 部署與監控最佳實踐
部署平台
Railway
(維持)。確保
nixpacks.toml
和
railway.json
中的環境變數
ENABLE_TRADING=true
。
伺服器規格
1GB RAM
(15m策略比1h更吃資源，但我們的優化使其仍可穩定運行)。
日誌告警
在 Railway 監控中，為
ERROR
和
WARNING
設置告警，特別是
APIError(code=-1111)
和
heartbeat blocked
。
回測框架
建立基於
trading_history.db
的
離線回測腳本
，模擬過去30天的交易，計算夏普比率與最大回撤，為XGBoost模型提供訓練數據。
安全閥
MAX_DRAWDOWN_ALERT_PERCENT = 5
和
AUTO_DISABLE_TRADING_AFTER_DRAWDOWN = True
必須啟用
。

7. 總結：v3.0 的終極形態
核心框架
1小時趨勢
15分鐘K線為主，1小時為輔
指標計算
Pandas/Numpy
TALib-binary + Numba JIT
反應速度
~40秒
< 10秒
穩定性
易因Discord/符號錯誤中斷
全系統防崩潰設計
智能性
靜態規則
XGBoost 自我學習 + 動態參數調整
交易頻率
低
高頻 (每日數十次)
風險控制
固定槓桿
智能槓桿 (基於波動性)
可維護性
高
極高 (所有調整可追溯、可解釋)

結論：
v3.0 不僅是一個升級，更是一場革命。它將Winiswin從一個「聰明的工具」，升級為一個「自適應的交易員」。

立即行動建議：

優先級最高 (P0): 將 requirements.txt 中的 pandas 指標全部替換為 ta-lib-binary，並在本地測試其兼容性。
緊急次之 (P1): 在 ict_smc.py 中，為 identify_order_blocks 函數添加 @numba.jit(nopython=True) 裝飾。
同步進行 (P1): 建立 trading_history.db SQLite 資料庫，並設計 strategy_optimizer.py 的初始框架。
